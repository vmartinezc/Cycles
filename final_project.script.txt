Script started on Mon May 14 13:16:43 2018
[?1034hbash-3.2$ cat C[K*.swift
//
//  Colors+Extension.swift
//  My Cycles
//  Created by Valeria Martinez on 5/10/18.
// Acknowledgment: I used the website: http://uicolor.xyz/#/hex-to-ui
// for the conversion of the hex colors to the UIColors,
//  Copyright Â© 2018 Valeria Martinez. All rights reserved.
//

import Foundation
import UIKit

struct Colors{
    static let peach = UIColor(red:1.00, green:0.93, blue:0.82, alpha:1.0)
    static let darkpeach = UIColor(red:0.99, green:0.71, blue:0.62, alpha:1.0)
    static let pink1 = UIColor(red:1.00, green:0.37, blue:0.43, alpha:1.0)
    static let pink2 =  UIColor(red:1.00, green:0.76, blue:0.44, alpha:1.0)
    static let lightblue = UIColor(red:0.88, green:0.92, blue:0.99, alpha:1.0)
    static let blueblue =  UIColor(red:0.81, green:0.87, blue:0.95, alpha:1.0)
    static let caramel = UIColor(red:0.82, green:0.57, blue:0.24, alpha:1.0)
    static let withCaramel = UIColor(red:0.82, green:0.57, blue:0.24, alpha:1.0)
    static let fuscia = UIColor(red:0.99, green:0.78, blue:1.00, alpha:1.0)
    static let lightfuscia = UIColor(red:1.00, green:0.86, blue:0.96, alpha:1.0)
    static let lightgray = UIColor(red:0.94, green:0.94, blue:0.94, alpha:1.0)
    static let gray = UIColor(red:0.73, green:0.73, blue:0.73, alpha:1.0)
    
    
    
    
    
    
    
    
    
}
//
//  UIView+Extension.swift
//  My Cycles
//  Created by Valeria Martinez on 5/10/18.
// This extension allows for a gradient background
//  Copyright Â© 2018 Valeria Martinez. All rights reserved.
//

import Foundation
import UIKit

extension UIView{
    func setGradientBackground(firstColor : UIColor, secondColor: UIColor){
        let gradientLayer = CAGradientLayer() //the CAGradientLayer allows a color gradient over its background color
        gradientLayer.frame = bounds
        gradientLayer.colors = [firstColor.cgColor, secondColor.cgColor]
        gradientLayer.locations = [0.0, 1.0] //diagonal gradient
        gradientLayer.startPoint = CGPoint(x: 0.0, y: 1.0)
        gradientLayer.endPoint = CGPoint(x: 0.0, y: 0.0)
        layer.insertSublayer(gradientLayer, at: 0)
    }
    
}
bash-3.2$ cd $"My Cycles"
bash-3.2$ ls
AppDelegate.swift	Base.lproj		ViewController.swift
Assets.xcassets		Info.plist		page2.swift
bash-3.2$ a[Kcat paf[Kge2.swifr[Kt ViewController.swift
//
//  page2.swift
//  My Cycles
//
//  Created by Valeria Martinez on 5/10/18.
//  Copyright Â© 2018 Valeria Martinez. All rights reserved.
//

import UIKit

class page2: UIViewController {

    @IBOutlet weak var textField: UITextView!
     var textFieldtxt = String()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        view.setGradientBackground(firstColor: Colors.lightblue, secondColor: Colors.blueblue)
        textField.text = textFieldtxt
        
        
       
        
        
    }



}
//
//  ViewController.swift
//  My Cycles
//  Created by Valeria Martinez on 5/5/18.
// for CS 214 @ CALVIN COLLEGE
//  Copyright Â© 2018 Valeria Martinez. All rights reserved.
//

import UIKit

class ViewController: UIViewController {

// IBOutlets: Interface builders for the labels/buttons to the code
    @IBOutlet weak var myCyclesStart: UILabel!
    @IBOutlet weak var startButton: UIButton!
    @IBOutlet weak var averagePeriod: UITextField!
    @IBOutlet weak var averageLength: UITextField!
    @IBOutlet weak var userName: UITextField!
    @IBOutlet weak var lastPeriod: UITextField!
    private var datePicker: UIDatePicker?
    var convertedCalculatedPeriod = ""
    var convertedOvulation = ""
    var convertedFertileWindow = ""
    
    override func viewDidLoad() {
    super.viewDidLoad()
//labels and buttons
    myCyclesStart.text = "My Cycles"
    myCyclesStart.textColor = UIColor.black
    startButton.setTitle("Start", for:.normal)
    averagePeriod.placeholder = "Average period length: "
    averageLength.placeholder = "Average cycle length: "
    userName.placeholder = "Enter name: "
    lastPeriod.placeholder = "Last period date: "
    
        
        
// date picker for lastPeriod
    datePicker = UIDatePicker()
    datePicker?.datePickerMode = .date //sets the format
    datePicker?.addTarget(self,action:
        #selector(ViewController.dateChanged(datePicker:)),for: .valueChanged)
    lastPeriod.inputView = datePicker //configure into the view for lastPeriod
      
        let userTap = UITapGestureRecognizer(target: self, action:
            #selector(ViewController.bgTapped(gestureRecognizer:)))
        view.addGestureRecognizer(userTap)

// setGradientBackground and Colors are extensions I created for myCycles
    view.setGradientBackground(firstColor: Colors.lightgray, secondColor: Colors.gray)


    }

    
/* bgTapped()
* @param: gestureRecognizer, a UITapGestureRecoginzer
* returns: nothing
* If the user taps on any part of the background, the datepicker keyboard will close
*/
    @objc func bgTapped(gestureRecognizer: UITapGestureRecognizer){
        view.endEditing(true)
        
    }
    
/* dateChanged()
* @param: datePicker, a UIDatePicker
* returns: nothing
* Changes the user selection of dates to the format "MM/DD/YYYY
*/
    
    @objc func dateChanged(datePicker: UIDatePicker){
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "MM/dd/yyyy"
        lastPeriod.text = dateFormatter.string(from: datePicker.date)
        view.endEditing(true)
    }
    
    
/* prepare()
* @param: segue: UIStoryboardSegue, sender
* prepares the code that needs to be done right before the segue
* from viewController to page2 (from first storyboard to the other)
*/
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        //calendar object
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "MM/dd/yyyy"
        let datePeriod = dateFormatter.date(from: lastPeriod.text!)
        // print(datePeriod)
        
        let calendar = NSCalendar.current
        let daysAdd = Int(averageLength.text!)
        let ovulationDays = Int(daysAdd!/2)
        let fertileDays = Int(ovulationDays-5)
        let newDateComponents = NSDateComponents()
        newDateComponents.day = daysAdd!
        let newDateComponents2 = NSDateComponents()
        newDateComponents2.day = ovulationDays
        let newDateComponents3 = NSDateComponents()
        newDateComponents3.day = fertileDays
        
    
        let calculatedPeriod = calendar.date(byAdding: newDateComponents as DateComponents, to:datePeriod!)
        convertedCalculatedPeriod = dateFormatter.string(from: calculatedPeriod!)
        
        let calculatedOvulation = calendar.date(byAdding: newDateComponents2 as DateComponents, to:datePeriod!)
        convertedOvulation = dateFormatter.string(from: calculatedOvulation!)
        
        let calculatedFertile = calendar.date(byAdding: newDateComponents3 as DateComponents, to:datePeriod!)
        convertedFertileWindow = dateFormatter.string(from: calculatedFertile!)
        
        
    
        let destViewController: page2 = segue.destination as! page2
        destViewController.textFieldtxt = "Hello, \(userName.text!)!\n \n \n Your average period duration: \(averagePeriod.text!) days \n Your average cycle length: \(averageLength.text!) days \n Next period date: \(convertedCalculatedPeriod)  \n Next ovulation date: \(convertedOvulation) \n Next fertile window starts: \(convertedFertileWindow) "
    }
    
    
//what should happen when the start button is pressed
    
    @IBAction func startButtonPressed(_ sender: Any) {

    }

}

bash-3.2$ exit

Script done on Mon May 14 13:17:59 2018
